{
	"name": "df_change_column_names_Austin",
	"properties": {
		"description": "To change some column names in the Austin dataset to ADF-compliant names.",
		"folder": {
			"name": "Final_Project_DADABI"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_txtfile_austin_crashes",
						"type": "DatasetReference"
					},
					"name": "srcAustin",
					"description": "Add source dataset which is Austin Crashes"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_txtfile_austin_crashes_corrected_columns",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as short,",
				"          {Crash ID} as integer,",
				"          crash_fatal_fl as boolean,",
				"          case_id as string,",
				"          {Primary address} as string,",
				"          {Secondary address} as string,",
				"          rpt_block_num as string,",
				"          rpt_street_name as string,",
				"          rpt_street_sfx as string,",
				"          crash_speed_limit as short,",
				"          road_constr_zone_fl as boolean,",
				"          latitude as double,",
				"          longitude as double,",
				"          crash_sev_id as short,",
				"          sus_serious_injry_cnt as short,",
				"          nonincap_injry_cnt as short,",
				"          poss_injry_cnt as short,",
				"          non_injry_cnt as short,",
				"          unkn_injry_cnt as short,",
				"          tot_injry_cnt as short,",
				"          death_cnt as boolean,",
				"          units_involved as string,",
				"          point as string,",
				"          motor_vehicle_death_count as boolean,",
				"          motor_vehicle_serious_injury_count as short,",
				"          bicycle_death_count as boolean,",
				"          bicycle_serious_injury_count as boolean,",
				"          pedestrian_death_count as boolean,",
				"          pedestrian_serious_injury_count as boolean,",
				"          motorcycle_death_count as boolean,",
				"          motorcycle_serious_injury_count as boolean,",
				"          other_death_count as boolean,",
				"          other_serious_injury_count as boolean,",
				"          onsys_fl as boolean,",
				"          private_dr_fl as boolean,",
				"          micromobility_serious_injury_count as boolean,",
				"          micromobility_death_count as boolean,",
				"          {Crash timestamp (US/Central)} as string,",
				"          {Crash timestamp} as string,",
				"          {Is deleted} as boolean,",
				"          {Is temporary record} as boolean,",
				"          {Law enforcement fatality count} as boolean,",
				"          {Reported street prefix} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> srcAustin",
				"srcAustin derive(Crash_ID = byName('Crash ID'),",
				"          Primary_Address = byName('Primary address'),",
				"          Secondary_Address = byName('Secondary address'),",
				"          Crash_Timestamp_US_Central = byName('Crash timestamp (US/Central)'),",
				"          Crash_Timestamp = byName('Crash timestamp'),",
				"          Is_Deleted = byName('Is deleted'),",
				"          Is_Temporary_Record = byName('Is temporary record'),",
				"          Law_enforcement_fatality_count = byName('Law enforcement fatality count'),",
				"          Reported_street_prefix = byName('Reported street prefix'),",
				"          ID = toString(ID),",
				"          crash_fatal_fl = toString(crash_fatal_fl),",
				"          case_id = toString(case_id),",
				"          rpt_block_num = toString(rpt_block_num),",
				"          rpt_street_name = toString(rpt_street_name),",
				"          rpt_street_sfx = toString(rpt_street_sfx),",
				"          crash_speed_limit = toString(crash_speed_limit),",
				"          road_constr_zone_fl = toString(road_constr_zone_fl),",
				"          latitude = toString(latitude),",
				"          longitude = toString(longitude),",
				"          crash_sev_id = toString(crash_sev_id),",
				"          sus_serious_injry_cnt = toString(sus_serious_injry_cnt),",
				"          nonincap_injry_cnt = toString(nonincap_injry_cnt),",
				"          poss_injry_cnt = toString(poss_injry_cnt),",
				"          non_injry_cnt = toString(non_injry_cnt),",
				"          unkn_injry_cnt = toString(unkn_injry_cnt),",
				"          tot_injry_cnt = toString(tot_injry_cnt),",
				"          death_cnt = toString(death_cnt),",
				"          units_involved = toString(units_involved),",
				"          point = toString(point),",
				"          motor_vehicle_death_count = toString(motor_vehicle_death_count),",
				"          motor_vehicle_serious_injury_count = toString(motor_vehicle_serious_injury_count),",
				"          bicycle_death_count = toString(bicycle_death_count),",
				"          bicycle_serious_injury_count = toString(bicycle_serious_injury_count),",
				"          pedestrian_death_count = toString(pedestrian_death_count),",
				"          pedestrian_serious_injury_count = toString(pedestrian_serious_injury_count),",
				"          motorcycle_death_count = toString(motorcycle_death_count),",
				"          motorcycle_serious_injury_count = toString(motorcycle_serious_injury_count),",
				"          other_death_count = toString(other_death_count),",
				"          other_serious_injury_count = toString(other_serious_injury_count),",
				"          onsys_fl = toString(onsys_fl),",
				"          private_dr_fl = toString(private_dr_fl),",
				"          micromobility_serious_injury_count = toString(micromobility_serious_injury_count),",
				"          micromobility_death_count = toString(micromobility_death_count)) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          ID,",
				"          crash_fatal_fl,",
				"          case_id,",
				"          rpt_block_num,",
				"          rpt_street_name,",
				"          rpt_street_sfx,",
				"          crash_speed_limit,",
				"          road_constr_zone_fl,",
				"          latitude,",
				"          longitude,",
				"          crash_sev_id,",
				"          sus_serious_injry_cnt,",
				"          nonincap_injry_cnt,",
				"          poss_injry_cnt,",
				"          non_injry_cnt,",
				"          unkn_injry_cnt,",
				"          tot_injry_cnt,",
				"          death_cnt,",
				"          units_involved,",
				"          point,",
				"          motor_vehicle_death_count,",
				"          motor_vehicle_serious_injury_count,",
				"          bicycle_death_count,",
				"          bicycle_serious_injury_count,",
				"          pedestrian_death_count,",
				"          pedestrian_serious_injury_count,",
				"          motorcycle_death_count,",
				"          motorcycle_serious_injury_count,",
				"          other_death_count,",
				"          other_serious_injury_count,",
				"          onsys_fl,",
				"          private_dr_fl,",
				"          micromobility_serious_injury_count,",
				"          micromobility_death_count,",
				"          Crash_ID,",
				"          Primary_Address,",
				"          Secondary_Address,",
				"          Crash_Timestamp_US_Central,",
				"          Crash_Timestamp,",
				"          Is_Deleted,",
				"          Is_Temporary_Record,",
				"          Law_enforcement_fatality_count,",
				"          Reported_street_prefix",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Austin_Column_Corrected.tsv'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}